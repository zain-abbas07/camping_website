generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model amenity {
  id         Int      @id @default(autoincrement())
  name       String
  campsiteId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  campsite   campsite @relation(fields: [campsiteId], references: [id], map: "Amenity_campsiteId_fkey")

  @@index([campsiteId], map: "Amenity_campsiteId_fkey")
}

model availability {
  id        Int      @id @default(autoincrement())
  spotId    Int
  date      DateTime
  available Boolean  @default(true)
  campsite  campsite @relation(fields: [spotId], references: [id], map: "Availability_spotId_fkey")

  @@index([spotId], map: "Availability_spotId_fkey")
}

model booking {
  id         Int            @id @default(autoincrement())
  userId     Int
  campsiteId Int
  checkIn    DateTime
  checkOut   DateTime
  totalPrice Float
  status     booking_status @default(PENDING)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime
  campsite   campsite       @relation(fields: [campsiteId], references: [id], map: "Booking_campsiteId_fkey")
  user       user           @relation(fields: [userId], references: [id], map: "Booking_userId_fkey")

  @@index([campsiteId], map: "Booking_campsiteId_fkey")
  @@index([userId], map: "Booking_userId_fkey")
}

model campsite {
  id           Int            @id @default(autoincrement())
  name         String
  description  String
  price        Float
  ownerId      Int?
  createdAt    DateTime       @default(now())
  locationId   Int?           @unique(map: "Campsite_locationId_key")
  amenity      amenity[]
  availability availability[]
  booking      booking[]
  location     location?      @relation(fields: [locationId], references: [id], map: "Campsite_locationId_fkey")
  owner         user?          @relation(fields: [ownerId], references: [id], map: "Campsite_ownerId_fkey")
  image        image[]
  review       review[]
  messages     message[]      @relation("CampsiteMessages") 

  @@index([ownerId], map: "Campsite_ownerId_fkey")
}

model image {
  id         Int      @id @default(autoincrement())
  url        String   @db.Text
  campsiteId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  campsite   campsite @relation(fields: [campsiteId], references: [id], map: "Image_campsiteId_fkey")

  @@index([campsiteId], map: "Image_campsiteId_fkey")
}

model location {
  id          Int      @id @default(autoincrement())
  country     String
  state       String?
  city        String
  street      String?   // <-- Add this
  houseNumber String?   // <-- Add this
  address     String?   // (optional: can be used for full address)
  latitude    Float     @default(0)
  longitude   Float     @default(0)
  campsite    campsite?
}

model passwordresettoken {
  id        Int      @id @default(autoincrement())
  token     String   @unique(map: "PasswordResetToken_token_key")
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  used      Boolean  @default(false)
  user      user     @relation(fields: [userId], references: [id], map: "PasswordResetToken_userId_fkey")

  @@index([userId], map: "PasswordResetToken_userId_fkey")
}

model review {
  id         Int      @id @default(autoincrement())
  userId     Int
  campsiteId Int
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime
  campsite   campsite @relation(fields: [campsiteId], references: [id], map: "Review_campsiteId_fkey")
  user       user     @relation(fields: [userId], references: [id], map: "Review_userId_fkey")

  @@index([campsiteId], map: "Review_campsiteId_fkey")
  @@index([userId], map: "Review_userId_fkey")
}

model user {
  id                 Int                  @id @default(autoincrement())
  name               String
  username           String               @unique(map: "User_username_key")
  email              String               @unique(map: "User_email_key")
  password           String
  role               user_role            @default(USER)
  createdAt          DateTime             @default(now())
  isVerified         Boolean              @default(false)
  phoneNumber        String?              @unique(map: "User_phoneNumber_key")
  status             String               @default("active")
  updatedAt          DateTime
  booking            booking[]
  campsite           campsite[]
  passwordresettoken passwordresettoken[]
  review             review[]
   sentMessages       message[]            @relation("SenderRelation") // Opposite relation for sender
  receivedMessages   message[]            @relation("ReceiverRelation") // Opposite relation for receiver
}


enum user_role {
  USER
  OWNER
}

enum booking_status {
  PENDING
  CONFIRMED
  CANCELLED
}


model message {
  id          Int      @id @default(autoincrement())
  senderId    Int
  receiverId  Int
  campsiteId  Int? 
  content     String
  createdAt   DateTime @default(now())
  sender      user     @relation("SenderRelation", fields: [senderId], references: [id], map: "Message_senderId_fkey")
  receiver    user     @relation("ReceiverRelation", fields: [receiverId], references: [id], map: "Message_receiverId_fkey")
  listing     campsite? @relation("CampsiteMessages", fields: [campsiteId], references: [id]) // <-- ADD relation name
  @@index([senderId], map: "Message_senderId_fkey")
  @@index([receiverId], map: "Message_receiverId_fkey")
}